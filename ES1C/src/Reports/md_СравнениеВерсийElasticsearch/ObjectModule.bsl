#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
    
    УстановитьПривилегированныйРежим(Истина);
    
    СтандартнаяОбработка = Ложь;
    ДокументРезультат.Очистить();
    
    РезультатПостроенияСравнения = Новый Структура("ЗаданиеВыполнено", Истина);
    АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(РезультатПостроенияСравнения, 
    Новый УникальныйИдентификатор);
    
    НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
    
    НастройкиПостроенияДрева = СформироватьНастройкиПостроенияДрева(НастройкиОтчета);
    
    md_ВерсионированиеElasticsearchВызовСервера.ЗаполнитьДеревоВерсийПоОбъекту(НастройкиПостроенияДрева, 
    АдресВоВременномХранилище);
    
    РезультатСравенения = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
    
    ТаблицаСравнения = ПреобразоватьРезультатСравненияВТаблицу(РезультатСравенения);
    
    ВывестиРезультатСравненияВОтчет(ТаблицаСравнения, НастройкиОтчета, ДанныеРасшифровки, ДокументРезультат);
    
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ПреобразоватьРезультатСравненияВТаблицу(РезультатСравенения)
    
    Перем ДревоВерсий;
    
    РезультатСравенения.Свойство("ДеревоВерсийОбъекта", ДревоВерсий);

    ТаблицаСравнения = Новый ТаблицаЗначений;
    ТаблицаСравнения.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка"), "ID"); 
    ТаблицаСравнения.Колонки.Добавить("ParentID", Новый ОписаниеТипов("Строка"), "Parent ID");
    
    Для Каждого Колонка Из ДревоВерсий.Колонки Цикл
        
        ТаблицаСравнения.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения, Колонка.Заголовок);
        
    КонецЦикла; 
    
    ГруппировкаКорневая = "Данные";
    Для Каждого СтрокаДрева Из ДревоВерсий.Строки Цикл
        
        ЗаполнитьТаблицуСравненияПоДреву(ТаблицаСравнения,СтрокаДрева, ГруппировкаКорневая);
        
    КонецЦикла; 
    
    Возврат ТаблицаСравнения;
    
КонецФункции

Процедура ЗаполнитьТаблицуСравненияПоДреву(ТаблицаСравнения, СтрокаДрева, Родитель = Неопределено)
    
    СтрокаТаблицы = ТаблицаСравнения.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДрева);
    СтрокаТаблицы.ParentID = Родитель;
    СтрокаТаблицы.ID = md_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
    "%1_%2", Родитель, СтрокаТаблицы.Реквизит);   
    
    Для Каждого СтрокаВетки Из СтрокаДрева.Строки Цикл
        
        ЗаполнитьТаблицуСравненияПоДреву(ТаблицаСравнения, СтрокаВетки, СтрокаТаблицы.ID);
        
    КонецЦикла; 
  
КонецПроцедуры
 
Процедура ПодготовитьСтруктуруСхемыКомпоновки(НастройкиОтчета, ПоляРезультатаОтчета)
    
    НастройкиОтчета.Структура.Очистить();
    
    ГруппировкаРодитель = НастройкиОтчета.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
    ГруппировкаРодитель.Использование = Истина;
         
    ПолеГруппировкиРодитель = ГруппировкаРодитель.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
    ПолеГруппировкиРодитель.Использование = Истина;        
    ПолеГруппировкиРодитель.Поле = Новый ПолеКомпоновкиДанных("ID");
    ПолеГруппировкиРодитель.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
    
    АвтоПоле = ГруппировкаРодитель.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
    АвтоПоле.Использование = Истина;
            
    Для Каждого ПолеРезультата Из ПоляРезультатаОтчета Цикл
        
        Если НЕ ЗначениеЗаполнено(ПолеРезультата.Выражение) Тогда
            Продолжить;
        КонецЕсли; 
        
        Поле = НастройкиОтчета.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		        
        Если ПолеРезультата.ИмяПоля = "ЕстьИзменения" Тогда
            Поле.Использование = Ложь;    
        Иначе            
            Поле.Использование = Истина;    
        КонецЕсли;
        
		Поле.Поле = Новый ПолеКомпоновкиДанных(ПолеРезультата.ИмяПоля);
        
    КонецЦикла; 
       
    Поле = НастройкиОтчета.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));    
    Поле.Использование = Истина;    
    Поле.Поле = Новый ПолеКомпоновкиДанных("ГруппировкаФлаг");
    
    ДобавитьОтборыГруппировкиРодитель(ГруппировкаРодитель, ПоляРезультатаОтчета);
    
КонецПроцедуры

Процедура ДобавитьНаборДанныхВСхему(СхемаКомпоновкиДанных, ПоляРезультатаОтчета, ИмяНабора)
    
    НовыйНабор = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
    НовыйНабор.Имя = ИмяНабора;
    НовыйНабор.ИмяОбъекта = "ТаблицаСравнения";
    НовыйНабор.ИсточникДанных = "ИсточникДанных1";
        
    Для Каждого ПолеРезультат Из ПоляРезультатаОтчета  Цикл
        
        ОписаниеПоля = Новый Структура("Поле, ПутьКДанным, Заголовок",
        ПолеРезультат.ИмяПоля, ПолеРезультат.ИмяПоля, ПолеРезультат.Заголовок);
        
        ДобавитьПолеВНаборДанных(НовыйНабор, ОписаниеПоля);
        
    КонецЦикла;
     
КонецПроцедуры

Процедура ДобавитьСвязьМеждуНаборами(СхемаКомпоновкиДанных, Источник, Приемник, ИсточникСвязи, ПриемникСвязи)
    
    СвязьНаборов = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
    СвязьНаборов.НаборДанныхИсточник = Источник;
    СвязьНаборов.НаборДанныхПриемник = Приемник;
    СвязьНаборов.ВыражениеИсточник = ИсточникСвязи;
    СвязьНаборов.ВыражениеПриемник = ПриемникСвязи;
    СвязьНаборов.Обязательная = Истина;

КонецПроцедуры

Процедура ДобавитьРесурсыВСхему(СхемаКомпоновкиДанных, ПоляРезультатаОтчета)
    
    Для Каждого ПолеРезультат Из ПоляРезультатаОтчета  Цикл
        
        Если НЕ ЗначениеЗаполнено(ПолеРезультат.Выражение) Тогда
            Продолжить;	
        КонецЕсли; 
        
        Ресурс = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
        Ресурс.ПутьКДанным = ПолеРезультат.ИмяПоля;
        Ресурс.Выражение = ПолеРезультат.Выражение;
        
    КонецЦикла;
        
КонецПроцедуры

Процедура ПодготовитьНаборыДанныхСхемыКомпоновки(ПоляРезультатаОтчета)
    
    СхемаКомпоновкиДанных.НаборыДанных.Очистить();
    СхемаКомпоновкиДанных.ИсточникиДанных.Очистить(); 
    
    ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
    ИсточникДанных.Имя = "ИсточникДанных1";
    ИсточникДанных.ТипИсточникаДанных = "Local";
    
    ДобавитьНаборДанныхВСхему(СхемаКомпоновкиДанных, ПоляРезультатаОтчета, "Основной");
    ДобавитьНаборДанныхВСхему(СхемаКомпоновкиДанных, ПоляРезультатаОтчета, "Родитель");
            
    ДобавитьСвязьМеждуНаборами(СхемаКомпоновкиДанных, "Основной", "Родитель", "ID", "ID");
    ДобавитьСвязьМеждуНаборами(СхемаКомпоновкиДанных, "Родитель", "Родитель", "ParentID", "ID");   
    
    ДобавитьРесурсыВСхему(СхемаКомпоновкиДанных, ПоляРезультатаОтчета);
   
КонецПроцедуры

Функция ПолучитьПоляРезультатаОтчета(ТаблицаСравнения)
    
    МассивОписанийПолей = Новый Массив;
    
    Для Каждого КолонкаТаблицы Из ТаблицаСравнения.Колонки Цикл
        
        СтруктураОписанияПоля = Новый Структура("ИмяПоля, Заголовок, Тип, Выражение", 
        КолонкаТаблицы.Имя, КолонкаТаблицы.Заголовок, КолонкаТаблицы.ТипЗначения, Неопределено);
        
        Если НЕ (СтруктураОписанияПоля.ИмяПоля = "Реквизит" ИЛИ СтруктураОписанияПоля.ИмяПоля = "ID"
            ИЛИ СтруктураОписанияПоля.ИмяПоля = "ParentID") Тогда
            
            СтруктураОписанияПоля.Выражение = md_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
            "Максимум(%1)", СтруктураОписанияПоля.ИмяПоля);
            
        КонецЕсли;
        
        МассивОписанийПолей.Добавить(СтруктураОписанияПоля);  
        
    КонецЦикла; 
    
    Возврат МассивОписанийПолей;
        
КонецФункции

Процедура ДобавитьОтборыГруппировкиРодитель(ГруппировкаРодитель, ПоляРезультатаОтчета);
        
    ОтборПоПустымСтрокам = ГруппировкаРодитель.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
    ОтборПоПустымСтрокам.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
    ОтборПоПустымСтрокам.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
    
    Для каждого Поле Из ПоляРезультатаОтчета Цикл
        
        Если ЗначениеЗаполнено(Поле.Выражение) и не Поле.ИмяПоля = "ЕстьИзменения" Тогда
            
            ОтборПоПустомуРесурсу = ОтборПоПустымСтрокам.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
            ОтборПоПустомуРесурсу.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Поле.ИмяПоля);
            ОтборПоПустомуРесурсу.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
             
        КонецЕсли; 
                
    КонецЦикла; 
    
    ПараметрыВывода = ГруппировкаРодитель.ПараметрыВывода; 
    ПараметрВыводаПараметров = ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьОтбор")); 
    ПараметрВыводаПараметров.Использование = Истина; 
    ПараметрВыводаПараметров.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;

КонецПроцедуры
 
Процедура ПодготовитьУсловноеОформлениеСхемыКомпоновкиИОтборы(НастройкиОтчета, ПоляРезультатаОтчета)
    
    ПараметрПоказыватьТолькоИзмененные = 
    НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПоказыватьТолькоИзмененные"));
    
    Если НЕ ПараметрПоказыватьТолькоИзмененные = Неопределено И ПараметрПоказыватьТолькоИзмененные.Использование Тогда
        
        ПоказыватьТолькоИзмененные = ПараметрПоказыватьТолькоИзмененные.Значение;
        
        Если ПоказыватьТолькоИзмененные Тогда
            
            ПоказыватьТолькоИзмененныеОтбор = 
            НастройкиОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
            ПоказыватьТолькоИзмененныеОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЕстьИзменения");
            ПоказыватьТолькоИзмененныеОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
            ПоказыватьТолькоИзмененныеОтбор.ПравоеЗначение = Истина;
            ПоказыватьТолькоИзмененныеОтбор.Использование = Истина;
            
        КонецЕсли; 
        
    КонецЕсли; 
    
КонецПроцедуры
 
Процедура ПодготовитьСхемуКомпоновкиДанных(НастройкиОтчета, ПоляРезультатаОтчета)
    
    ПодготовитьНаборыДанныхСхемыКомпоновки(ПоляРезультатаОтчета);
    
    ПодготовитьСтруктуруСхемыКомпоновки(НастройкиОтчета, ПоляРезультатаОтчета);
    
    ПодготовитьУсловноеОформлениеСхемыКомпоновкиИОтборы(НастройкиОтчета, ПоляРезультатаОтчета);
         
КонецПроцедуры

Процедура ДобавитьПолеВНаборДанных(Набор, ОписаниеНабора)
    
    ПолеРеквизит = Набор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    ЗаполнитьЗначенияСвойств(ПолеРеквизит, ОписаниеНабора);
    Если ПолеРеквизит.Поле ="ID" Тогда
        
        ПолеРеквизит.Заголовок = "Реквизит";
        ПолеРеквизит.ВыражениеПредставления = "Реквизит";
        
    КонецЕсли; 
    
КонецПроцедуры

Процедура ВывестиРезультатСравненияВОтчет(ТаблицаСравнения, НастройкиОтчета, ДанныеРасшифровки, ДокументРезультат)
        
    ПоляРезультатаОтчета = ПолучитьПоляРезультатаОтчета(ТаблицаСравнения);
    ПодготовитьСхемуКомпоновкиДанных(НастройкиОтчета, ПоляРезультатаОтчета);
    
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
    
    ВнешнийНабор = Новый Структура;
    ВнешнийНабор.Вставить("ТаблицаСравнения", ТаблицаСравнения);
    
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешнийНабор, ДанныеРасшифровки);
    
    ПроцессВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессВывода.УстановитьДокумент(ДокументРезультат);
    ПроцессВывода.Вывести(ПроцессорКомпоновки, Истина);
        		
КонецПроцедуры
 
#Область ФормированиеПараметров

Функция ПодготовитьШаблонДреваСравнения(КоличествоВерсий)
    
    ДревоСравнения = Новый ДеревоЗначений;
    ДревоСравнения.Колонки.Добавить("Реквизит", Новый ОписаниеТипов("Строка"), "Реквизит");
    ДревоСравнения.Колонки.Добавить("ЕстьИзменения", Новый ОписаниеТипов("Булево"), "ЕстьИзменения");
     
    НомерПервойКолонки = 1;
    
    Для i = НомерПервойКолонки По КоличествоВерсий Цикл
        
        ДобавитьКолонкуВДерево(ДревоСравнения, i);
        
    КонецЦикла; 
    
    Возврат ДревоСравнения;
    
КонецФункции

Процедура ДобавитьКолонкуВДерево(ДревоСравнения, i)
    
    ШаблонИмениКолонки = "Версия%1";
    ШаблонЗаголовкаКолонки = "Версия%1";

    ИмяКолонки = md_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениКолонки, i); 
    ИмяЗаголовка = md_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовкаКолонки, i);  
    
    ДревоСравнения.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Строка"), ИмяЗаголовка);
    
КонецПроцедуры

Функция СформироватьНастройкиПостроенияДрева(НастройкиОтчета)
    
    ПараметрыСравнения = Новый Структура;
    
    ПараметрКоличествоВерсий = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(
    Новый ПараметрКомпоновкиДанных("КоличествоВерсий"));
          
    ПараметрДатаОтбора = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(
    Новый ПараметрКомпоновкиДанных("ДатаОтбора"));
    
    ПараметрСсылкаНаОбъект = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(
    Новый ПараметрКомпоновкиДанных("СсылкаНаОбъект"));
    
    ПараметрСерверElasticsearch = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(
    Новый ПараметрКомпоновкиДанных("СерверElasticsearch"));
    
    ПараметрИндексES = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(
    Новый ПараметрКомпоновкиДанных("ИндексES"));

    ДатаОтбора = ?(ТипЗнч(ПараметрДатаОтбора.Значение) = Тип("СтандартнаяДатаНачала"),
    ПараметрДатаОтбора.Значение.Дата,
    ПараметрДатаОтбора.Значение);
    
    ПараметрыСравнения.Вставить("ИндексES", ПараметрИндексES.Значение);    
    ПараметрыСравнения.Вставить("ДеревоОбъектов", ПодготовитьШаблонДреваСравнения(ПараметрКоличествоВерсий.Значение));
    ПараметрыСравнения.Вставить("ДатаОтбора", ДатаОтбора);
    ПараметрыСравнения.Вставить("ВсегоВерсий", ПараметрКоличествоВерсий.Значение);
    ПараметрыСравнения.Вставить("СсылкаНаОбъект", ПараметрСсылкаНаОбъект.Значение);
    
    АдресСервера = md_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрСерверElasticsearch.Значение, "АдресСервера");
    Порт = md_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрСерверElasticsearch.Значение, "Порт");

    ПараметрыСравнения.Вставить("АдресСервера", АдресСервера);
    ПараметрыСравнения.Вставить("ПортСервера", Порт);

    Возврат ПараметрыСравнения;
            
КонецФункции

#КонецОбласти

#КонецОбласти 
