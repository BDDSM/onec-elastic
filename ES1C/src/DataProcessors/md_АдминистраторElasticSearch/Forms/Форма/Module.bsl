&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    ДополнитьФорму();
        
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    ПодключитьОбработчикОжидания("СформироватьДиаграммуВызововЗаТекущийЧас", 1, Истина);
    
    Действия = Новый Массив;
    Действия.Добавить("ЗаполнитьСводныеДанныеПоОбъекту");
    ОбработатьДействияПриИзмененииНастроекИнстанса(Действия);  
    
    Если Элементы.ОтключитьОбновлениеВремени.Пометка Тогда
        
        УстановитьОформлениеКнопкиОбновленияВремени(Элементы.ОтключитьОбновлениеВремени.Пометка);
        ПодключитьОбработчикОжидания("ОбновитьТекущееUTCВремяКомпьютра", 5, Ложь);
        
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеКнопкиОбновленияВремени(ЕстьПометка)
    
    КомандаОтключения = ЭтотОбъект.Команды.Найти("ОтключитьОбновлениеВремени");      
    КомандаОтключения.Подсказка = ?(ЕстьПометка, 
    НСтр("ru='Отключить обновление времени'"), НСтр("ru='Включить обновление времени'"));    
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапкиФормы

&НаКлиенте
Процедура СсылкаНаОбъектПриИзменении(Элемент)
    
    Действия = Новый Массив;
    Действия.Добавить("ОчиститьДерево");
    Действия.Добавить("ЗаполнитьСводныеДанныеПоОбъекту");
    ОбработатьДействияПриИзмененииНастроекИнстанса(Действия);
    
КонецПроцедуры

&НаКлиенте
Процедура СерверElasticsearchПриИзменении(Элемент)
    
    Действия = Новый Массив;
    Действия.Добавить("ОчиститьДерево");
    
    Если ЗначениеЗаполнено(Объект.СсылкаНаОбъект) Тогда
        
        Действия.Добавить("ЗаполнитьИндексы");	
        
    КонецЕсли; 
    ОбработатьДействияПриИзмененииНастроекИнстанса(Действия);
    
КонецПроцедуры

&НаКлиенте
Процедура ИндексESПриИзменении(Элемент)
        
    Действия = Новый Массив;
    Действия.Добавить("ОчиститьДерево");
    Действия.Добавить("ЗаполнитьСводныеДанныеПоОбъекту");
    ОбработатьДействияПриИзмененииНастроекИнстанса(Действия);
    
КонецПроцедуры

#КонецОбласти 

#Область ОбработчкиКоманд

&НаКлиенте
Процедура ОтправитьВElasticSearch(Команда)
    
    ТекстВопроса = НСтр("ru='Отправить все, предназначенные для Elasticsearch, данные в индексы?
    |Выполнить операцию, минуя регламентное задание по отправке?'");    
    
    ОповещениеЗавершения = Новый ОписаниеОповещения("ОтправитьВElasticSearchЗавершение", ЭтотОбъект);
    
    ПоказатьВопрос(ОповещениеЗавершения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
    
КонецПроцедуры

&НаКлиенте
Процедура ОчередьОтправкиElasticsearch(Команда)
	
	ОткрытьФорму("РегистрСведений.md_ОчередьДанныхКОтправкеВElasticsearch.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВерсионированияElasticsearch(Команда)

	ОткрытьФорму("РегистрСведений.md_НастройкаВерсионированияОбъектовВElasticsearch.ФормаСписка");

КонецПроцедуры

&НаКлиенте
Процедура ЖурналСообщенийElasticsearch(Команда)
	
	ОткрытьФорму("РегистрСведений.md_ЖурналСообщенийElasticsearch.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоОбъекту(Команда)
    
    ЗаполнитьСводныеДанныеПоОбъекту();
    
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
    
    ВыполнитьЗапросНаСервере();
    
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтатистику(Команда)
	
	ПоказатьСтатистикуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВерсии(Команда)
    
    ВыполняемаяОперация = "СравнениеВерсий";
	СформироватьДанныеСравненияВерсийНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьАнализВызовов(Команда)
    
    ПоказатьАнализВызововНаСервере();
    
КонецПроцедуры

&НаКлиенте
Процедура ТекущийЧас(Команда)
    
    УстановитьТекущийЧас();
    
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОбновлениеВремени(Команда)
    
    Элементы.ОтключитьОбновлениеВремени.Пометка = НЕ Элементы.ОтключитьОбновлениеВремени.Пометка;
    
    Если Элементы.ОтключитьОбновлениеВремени.Пометка Тогда
        
        ПодключитьОбработчикОжидания("ОбновитьТекущееUTCВремяКомпьютра", 5, Ложь);
        
    Иначе
        
        ОтключитьОбработчикОжидания("ОбновитьТекущееUTCВремяКомпьютра");
        
    КонецЕсли;
    
    УстановитьОформлениеКнопкиОбновленияВремени(Элементы.ОтключитьОбновлениеВремени.Пометка);
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОтправитьВElasticSearchЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат = КодВозвратаДиалога.Да Тогда
        
        ПоказатьОповещениеПользователя("Отправка данных в Elasticsearch");
        md_ВерсионированиеElasticsearchВызовСервера.ОтправитьДанныеОчередейВElasticsearch();
        
    Иначе
        
        ПоказатьОповещениеПользователя("Отказ от операции");
        
    КонецЕсли; 
        
КонецПроцедуры
    
&НаКлиенте
Процедура ОбновитьТекущееUTCВремяКомпьютра() Экспорт
    
    UTCВремя = ОбновитьТекущееUTCВремяСервера();  
    
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьТекущееUTCВремяСервера()
    
     Возврат ТекущаяУниверсальнаяДата();
    
КонецФункции
 
&НаКлиенте
Процедура СформироватьДиаграммуВызововЗаТекущийЧас() Экспорт
    
    СформироватьДиаграммуВызововЗаТекущийЧасСервер();
    	
КонецПроцедуры

&НаСервере
Процедура СформироватьДиаграммуВызововЗаТекущийЧасСервер()
    
    ПоказатьАнализВызововНаСервере();
    
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущийЧас()
    
    ЧасВСекундах = 3600;
	ДатаНачалаАнализа = ТекущаяДата() - ЧасВСекундах;
	ДатаОкончанияАнализа = ТекущаяДата();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыОпераций()
    
    ВидыОпераций.ЗагрузитьЗначения(ПолучитьМассивВидовОпераций());

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивВидовОпераций()
    
    МассивОпераций = Новый Массив;
    МассивОпераций.Добавить("Статистика по индексу");
    МассивОпераций.Добавить("Запрос из консоли");
    МассивОпераций.Добавить("Версии объекта");
    МассивОпераций.Добавить("Индексирование документа (Bulk Api)");
    МассивОпераций.Добавить("Проверка версии");
    МассивОпераций.Добавить("Индексирование документа"); 
    
    Возврат МассивОпераций;
    
КонецФункции
 
&НаСервере
Процедура ПоказатьСтатистикуНаСервере()
	
	МенеджерElasticSearch = РеквизитФормыВЗначение("Объект");
	ДеревоОбъектов = РеквизитФормыВЗначение("СтатистикаПоСерверам", Тип("ДеревоЗначений"));
	МенеджерElasticSearch.ЗаполнитьСтатистикуПоСерверам(ДеревоОбъектов);
	ЗначениеВРеквизитФормы(ДеревоОбъектов, "СтатистикаПоСерверам");
		
КонецПроцедуры

&НаКлиенте
Процедура ВсегоВерсийПриИзменении(Элемент)
    
	Если НЕ Объект.ВсегоВерсий = ВсегоВерсийСтарое Тогда
		
		ИзменитьВерсий = Объект.ВсегоВерсий - ?(ВсегоВерсийСтарое = Неопределено, 0, ВсегоВерсийСтарое);
		ИзменитьКоличествоВерсийНаСервере(ИзменитьВерсий);
		ВсегоВерсийСтарое = Объект.ВсегоВерсий;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКоличествоВерсийНаСервере(ИзменитьВерсий)
	
	МассивИзменяемыхРеквизитов = Новый Массив;
	ШаблонИмени = "Версия%1";
	ШаблонИмениПути = "ДеревоВерсий.Версия%1";	
	НачальноеЗначение = ?(ИзменитьВерсий > 0, Объект.ВсегоВерсий-ИзменитьВерсий, Объект.ВсегоВерсий);
	КонечноеЗначение = ?(ИзменитьВерсий > 0, Объект.ВсегоВерсий, Объект.ВсегоВерсий - ИзменитьВерсий);
	
	Для i = НачальноеЗначение + 1 По КонечноеЗначение Цикл
		
		ИмяРеквизита = md_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмени, Формат(i, "ЧГ="));
		ИмяПути = md_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениПути, Формат(i, "ЧГ="));
		
		Если ИзменитьВерсий > 0 Тогда
		
			МассивИзменяемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, 
            Новый ОписаниеТипов("Строка"), "ДеревоВерсий", ИмяРеквизита));
			
		Иначе
			
			МассивИзменяемыхРеквизитов.Добавить(ИмяПути);
			
		КонецЕсли; 
				
	КонецЦикла;
	
	Если ИзменитьВерсий > 0 Тогда
		
		ЭтотОбъект.ИзменитьРеквизиты(МассивИзменяемыхРеквизитов);	
		
		Для Каждого РеквизитФормы Из МассивИзменяемыхРеквизитов Цикл
		
			КолонкаДрева = Элементы.Добавить(РеквизитФормы.Имя, Тип("ПолеФормы"), Элементы.ДеревоВерсий);	
		    КолонкаДрева.ПутьКДанным = РеквизитФормы.Путь + "." + РеквизитФормы.Имя;
			
		КонецЦикла; 		
		
		Объект.ВсегоВерсий = КонечноеЗначение;

	Иначе
		
		ЭтотОбъект.ИзменитьРеквизиты(, МассивИзменяемыхРеквизитов);
		
		Для Каждого РеквизитФормы Из МассивИзменяемыхРеквизитов Цикл
		
			Элементы.Удалить(Элементы[СтрЗаменить(РеквизитФормы, "ДеревоВерсий.", "")]);	
		
		КонецЦикла;
		
		Объект.ВсегоВерсий = НачальноеЗначение;

	КонецЕсли; 
		
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокМетодовCRUD()
      
    Элементы.МетодHTTP.СписокВыбора.ЗагрузитьЗначения(ЗаполнитьМассивМетодовCRUD());
    
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьМассивМетодовCRUD()
    
    МассивМетодовCRUD = Новый Массив;
    МассивМетодовCRUD.Добавить("GET");
    МассивМетодовCRUD.Добавить("POST");
    МассивМетодовCRUD.Добавить("PUT");
    МассивМетодовCRUD.Добавить("COPY");
    МассивМетодовCRUD.Добавить("DELETE");
    МассивМетодовCRUD.Добавить("CONNECT");
    МассивМетодовCRUD.Добавить("HEAD");
    МассивМетодовCRUD.Добавить("PATCH");
    МассивМетодовCRUD.Добавить("PUT");
    МассивМетодовCRUD.Добавить("PROPFIND");
    МассивМетодовCRUD.Добавить("PROPPATCH");
    МассивМетодовCRUD.Добавить("TRACE");
    МассивМетодовCRUD.Добавить("UNLOCK");       
    
    Возврат МассивМетодовCRUD;
    
КонецФункции
 
&НаСервере
Процедура ВыполнитьЗапросНаСервере()
    
    ЗаголовкиЗапроса = Новый Соответствие;
    ЗаголовкиЗапроса.Вставить("Content-Type", "application/json");
    
    СтруктураОтправкиПакета = Новый Структура;  
    СтруктураОтправкиПакета.Вставить("Заголовки", ЗаголовкиЗапроса);
    СтруктураОтправкиПакета.Вставить("АдресСервера", АдресСервера);
    СтруктураОтправкиПакета.Вставить("Порт", Порт);
    СтруктураОтправкиПакета.Вставить("АдресРесурса", АдресРесурса);    
    СтруктураОтправкиПакета.Вставить("HTTPМетод", МетодHHTP);
    СтруктураОтправкиПакета.Вставить("ВидОперации", ВидОперацииЗапрос);
    СтруктураОтправкиПакета.Вставить("ТелоЗапроса", ТелоЗапроса);
    СтруктураОтправкиПакета.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
    
    ОтветES = md_ВерсионированиеElasticsearchВызовСервера.ВыполнитьЗапросКElasticSearch(СтруктураОтправкиПакета);
    
    ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОтветES, "КодСостояния, ТелоОтвета");
    
КонецПроцедуры

&НаСервере
Процедура ПоказатьАнализВызововНаСервере()
    
    Если ПроверитьЗаполнение() Тогда
		
		ДиаграммаАнализаВызововElasticSearch.Очистить();
		ДиаграммаАнализаВызововElasticSearch.ТипДиаграммы = ТипДиаграммы.График; // График всегда, в принудительной форме
        
        ШаблонЗаголовка = НСтр("ru = 'Анализ вызовов ES  с %1 по %2'");
		ТекстЗаголовка = md_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка,
		Формат(ДатаНачалаАнализа, "ДФ='дд.ММ.гг ЧЧ:мм'"), Формат(ДатаОкончанияАнализа, "ДФ='дд.ММ.гг ЧЧ:мм'"));
		
		ДиаграммаАнализаВызововElasticSearch.ОбластьЗаголовка.Текст = ТекстЗаголовка;
        
        Смещение0 = 0;
        Смещение1 = 1;
        Смещение0_1 = 0.1;
        
		ДиаграммаАнализаВызововElasticSearch.ОбластьЗаголовка.Верх 	= Смещение0;
		ДиаграммаАнализаВызововElasticSearch.ОбластьЗаголовка.Лево 	= Смещение0;
		ДиаграммаАнализаВызововElasticSearch.ОбластьЗаголовка.Право = Смещение1;
		ДиаграммаАнализаВызововElasticSearch.ОбластьЗаголовка.Низ 	= Смещение0_1;
		ДиаграммаАнализаВызововElasticSearch.ОбластьПостроения.Верх = Смещение0_1;
				
		ОперацияСерия = Новый Соответствие;
		Точка = Неопределено;
		КоличествоТочек = 0;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЖурналСообщенийElasticsearch.Период КАК Период,
		|	ЖурналСообщенийElasticsearch.ВидОперации КАК ВидОперации,
		|	МАКСИМУМ(ЖурналСообщенийElasticsearch.Длительность) КАК Длительность
		|ИЗ
		|	РегистрСведений.md_ЖурналСообщенийElasticsearch КАК ЖурналСообщенийElasticsearch
		|ГДЕ
		|	ЖурналСообщенийElasticsearch.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ЖурналСообщенийElasticsearch.ВидОперации В (&ВидОперации)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЖурналСообщенийElasticsearch.Период,
		|	ЖурналСообщенийElasticsearch.ВидОперации";
		
		Запрос.УстановитьПараметр("КонецПериода", ДатаОкончанияАнализа);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачалаАнализа);        
		Запрос.УстановитьПараметр("ВидОперации", ВидыОпераций.ВыгрузитьЗначения());
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если Точка = Неопределено ИЛИ Точка.Значение <> ВыборкаДетальныеЗаписи.Период Тогда
				Точка = ДиаграммаАнализаВызововElasticSearch.УстановитьТочку(ВыборкаДетальныеЗаписи.Период);
				КоличествоТочек = КоличествоТочек + 1;
			КонецЕсли;
			
			Если ОперацияСерия[ВыборкаДетальныеЗаписи.ВидОперации] = Неопределено Тогда
				Серия = ДиаграммаАнализаВызововElasticSearch.УстановитьСерию(ВыборкаДетальныеЗаписи.ВидОперации);
				Серия.Маркер = ТипМаркераДиаграммы.Нет;
				ОперацияСерия.Вставить(ВыборкаДетальныеЗаписи.ВидОперации, Серия);
			КонецЕсли;
			
			Серия = ОперацияСерия[ВыборкаДетальныеЗаписи.ВидОперации];
			
			ДиаграммаАнализаВызововElasticSearch.УстановитьЗначение(Точка, Серия, ВыборкаДетальныеЗаписи.Длительность);
			
		КонецЦикла;
		
		ДиаграммаАнализаВызововElasticSearch.Обновление = Истина;
		
		Если КоличествоТочек = 1 Тогда
			Для Каждого ТекСерия Из ДиаграммаАнализаВызововElasticSearch.Серии Цикл
				ТекСерия.Маркер = ТипМаркераДиаграммы.Круг;  
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
    
    ПроверяемыеРеквизиты.Очистить();
    
    Если ВыполняемаяОперация = "СравнениеВерсий" Тогда
        
        ПроверяемыеРеквизиты.Добавить("СсылкаНаОбъект");
        ПроверяемыеРеквизиты.Добавить("СерверElasticsearch");	
        ПроверяемыеРеквизиты.Добавить("ИндексES");	
        
    КонецЕсли; 
   
КонецПроцедуры

&НаСервере
Процедура ДополнитьФорму()
    
    ЗаполнитьСписокМетодовCRUD();
    ИнициализироватьНачальныеЗначенияФормы();
    ОбработатьПостроениеДреваВерсийНаСервере();	
    УстановитьДоступностьСтраницыПроизвольныеЗапросы();
    
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСтраницыПроизвольныеЗапросы()

    Элементы.СтраницаКонсольЗапросов.Доступность = Истина;
    //md_ВерсионированиеElasticsearchВызовСервера.ЭтоАдминистраторElasticSearch();
    
КонецПроцедуры 

&НаСервере
Процедура ИнициализироватьНачальныеЗначенияФормы()
    
    ОтображаемоеКоличествоВерсийПоУмолчанию = 10;
    Объект.ВсегоВерсий = ОтображаемоеКоличествоВерсийПоУмолчанию;
    Объект.ДатаОтбора = ТекущаяДатаСеанса();
    Объект.ВидСравнения = "Меньше или равно";
    ВидОперацииЗапрос = "Запрос из консоли";
 
    ЗаполнитьВидыОпераций();
    УстановитьТекущийЧас();

КонецПроцедуры

&НаСервере
Процедура ОбработатьПостроениеДреваВерсийНаСервере()
    
    Если Не ЗначениеЗаполнено(ВсегоВерсийСтарое) 
        ИЛИ НЕ Объект.ВсегоВерсий = Объект.ВсегоВерсийСтарое Тогда
		
		ИзменитьВерсий = Объект.ВсегоВерсий - ?(НЕ ЗначениеЗаполнено(ВсегоВерсийСтарое), 0, ВсегоВерсийСтарое);
		ИзменитьКоличествоВерсийНаСервере(ИзменитьВерсий);
		ВсегоВерсийСтарое = Объект.ВсегоВерсий;
		
	КонецЕсли; 

Конецпроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИндексыESПоСерверуИСсылке(СерверES, СсылкаНаОбъект)
    
    ИндексыES = Новый Массив;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   md_НастройкаВерсионированияОбъектовВElasticsearch.ИндексES КАК ИндексES
        |ИЗ
        |   РегистрСведений.md_НастройкаВерсионированияОбъектовВElasticsearch КАК md_НастройкаВерсионированияОбъектовВElasticsearch
        |ГДЕ
        |   md_НастройкаВерсионированияОбъектовВElasticsearch.Использование
        |   И md_НастройкаВерсионированияОбъектовВElasticsearch.СерверElasticsearch = &СерверElasticsearch
        |   И md_НастройкаВерсионированияОбъектовВElasticsearch.ТипМетаданных = &ТипМетаданных";
    
    Запрос.УстановитьПараметр("СерверElasticsearch", СерверES);
    Запрос.УстановитьПараметр("ТипМетаданных", СсылкаНаОбъект.Метаданные().ПолноеИмя());
    
    УстановитьПривилегированныйРежим(Истина);
    РезультатЗапроса = Запрос.Выполнить();
    УстановитьПривилегированныйРежим(Ложь);
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        
        ИндексыES.Добавить(ВыборкаДетальныеЗаписи.ИндексES);
        
    КонецЦикла;
    
    Возврат ИндексыES;
    
КонецФункции


&НаКлиенте
Процедура ОбработатьДействияПриИзмененииНастроекИнстанса(Действия)
    
    Для каждого Действие Из Действия Цикл
        
        Если Действие = "ОчиститьДерево" Тогда
            
             ДеревоВерсий.ПолучитьЭлементы().Очистить();

        КонецЕсли;
        
        Если Действие = "ЗаполнитьИндексы" Тогда
            
             Элементы.ИндексES.СписокВыбора.ЗагрузитьЗначения(
             ПолучитьИндексыESПоСерверуИСсылке(Объект.СерверElasticsearch, Объект.СсылкаНаОбъект));

        КонецЕсли;
        
        Если Действие = "ЗаполнитьСводныеДанныеПоОбъекту" Тогда
            
            ЗаполнитьСводныеДанныеПоОбъекту();
                
        КонецЕсли;
        
    КонецЦикла; 
    
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьДанныеОбъектаПоСтруктуре(ДанныеОбъектаВСтруктуре)
    
    ШаблонЗаголовка = 
    "Сервер: %1
    |Индекс: %2
    |UUID: %3
    |Всего версий: %4
    |
    |Версии:";
    
    ЗаголовокВерсии = md_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
    ШаблонЗаголовка, ДанныеОбъектаВСтруктуре.Сервер, ДанныеОбъектаВСтруктуре.Индекс,
    ДанныеОбъектаВСтруктуре.UUID, ДанныеОбъектаВСтруктуре.ВсегоВерсий);
    
    ОписаниеВерсии = 
    "
    |Версия %1
    |Версия объекта 1С: %2
    |Автор: %3
    |Дата из версии: %4
    |";
    
    ОписаниеВерсий = "";
    КраткиеХарактеристики = Новый Массив;
    
    Итератор = 0;
    
    Для каждого Версия Из ДанныеОбъектаВСтруктуре.КраткиеХарактеристикиВерсий Цикл
        
        Итератор = Итератор + 1;
        ПредставлениеВерсии = md_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
        ОписаниеВерсии, Формат(Итератор, "ЧГ="), Версия.Object_Version, Версия.Object_User, Версия.Object_DateTime); 
        КраткиеХарактеристики.Добавить(ПредставлениеВерсии); // Киллер фича - string builder    
        
    КонецЦикла; 
    
    ОписаниеВерсий = СтрСоединить(КраткиеХарактеристики, Символы.ПС);
  
    ДанныеВерсии = md_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3", ЗаголовокВерсии, Символы.ПС,
    ОписаниеВерсий);
    
    Возврат ДанныеВерсии;    
    
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСводныеДанныеОбъекта(СерверElasticsearch, ИндексES, СсылкаНаОбъект)
    
    Возврат md_ВерсионированиеElasticsearchСлужебный.ПолучитьСводныеДанныеОбъекта(
    СерверElasticsearch,
    ИндексES, 
    СсылкаНаОбъект);
    
КонецФункции
 
&НаКлиенте
Процедура ЗаполнитьСводныеДанныеПоОбъекту()
    
    ДанныеОбъекта.Очистить();
    ДанныеОбъектаВСтруктуре = ПолучитьСводныеДанныеОбъекта(
    Объект.СерверElasticsearch,
    Объект.ИндексES, 
    Объект.СсылкаНаОбъект);
    
    Если ДанныеОбъектаВСтруктуре.Свойство("ЕстьОшибка") Тогда
        
        ВызватьИсключение ДанныеОбъектаВСтруктуре.ТелоОтвета;
        
    КонецЕсли; 

    Если НЕ ДанныеОбъектаВСтруктуре.Количество() = 0 Тогда
        
        ДанныеОбъекта.УстановитьТекст(ЗаполнитьДанныеОбъектаПоСтруктуре(ДанныеОбъектаВСтруктуре));
        
    КонецЕсли; 
    
КонецПроцедуры


#Область ФормированиеДреваСравненияВерсий

&НаСервере
Функция СформироватьПараметрыСравненияВерсий()
    
    ПараметрыСравнения = Новый Структура;
    ПараметрыСравнения.Вставить("ИндексES", Объект.ИндексES);
    
    ДеревоВерсийОбъекта = РеквизитФормыВЗначение("ДеревоВерсий", Тип("ДеревоЗначений"));
    ДеревоВерсийОбъекта.Строки.Очистить();
    ПараметрыСравнения.Вставить("ДеревоОбъектов", ДеревоВерсийОбъекта);
    
    ПараметрыСравнения.Вставить("ДатаОтбора", Объект.ДатаОтбора);
    ПараметрыСравнения.Вставить("ВсегоВерсий", Объект.ВсегоВерсий);
    ПараметрыСравнения.Вставить("СсылкаНаОбъект", Объект.СсылкаНаОбъект);
    
    АдресСервера = md_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СерверElasticsearch, "АдресСервера");
    Порт = md_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СерверElasticsearch, "Порт");
    
    ПараметрыСравнения.Вставить("АдресСервера", АдресСервера);
    ПараметрыСравнения.Вставить("ПортСервера", Порт);
    
    Возврат ПараметрыСравнения;
    
 КонецФункции

 &НаСервере
 Процедура ПолучитьДанныеСравненияВерсийНепосредственно(Результат, ПараметрыСравненияВерсий, АдресВоВременномХранилище)
	 
	 md_ВерсионированиеElasticsearchВызовСервера.ЗаполнитьДеревоВерсийПоОбъекту(ПараметрыСравненияВерсий, 
	 АдресВоВременномХранилище);
	 
	 РезультатЗаполнения = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	 
	 Если РезультатЗаполнения.Свойство("ЕстьОшибки") Тогда
		 
		 Результат.Статус = "Исключение";
		 
	 Иначе
		 
		 Результат.Статус = "ВыполненоУспешно";
		 Результат.Детали = Новый Структура("АдресХранилища", АдресВоВременномХранилище);
		 
	 КонецЕсли;
	 
 КонецПроцедуры
	
&НаСервере
Функция ЗапуститьФормированиеДанныхСравненияВФоне()
	
	Результат = Новый Структура("Статус, Детали");
	
	ПараметрыСравненияВерсий = СформироватьПараметрыСравненияВерсий();
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	Если Ложь И md_ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		ПолучитьДанныеСравненияВерсийНепосредственно(Результат, ПараметрыСравненияВерсий, АдресХранилища);
		
	Иначе
		
		НаименованиеЗадания = НСтр("ru = 'Получение данных для сравнения версий объекта'");
		ИмяМетода = "md_ВерсионированиеElasticsearchВызовСервера.ЗаполнитьДеревоВерсийПоОбъекту";
		КлючЗадания = СтрЗаменить("ПолучениеДанныхВерсий_%1", "%1", Строка(УникальныйИдентификатор));
		
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(ПараметрыСравненияВерсий);
		ПараметрыЗадания.Добавить(АдресХранилища);
		
		ФоновоеЗадание = 
		ФоновыеЗадания.Выполнить(ИмяМетода, ПараметрыЗадания, КлючЗадания, НаименованиеЗадания); 
				
		Результат.Статус = "Выполняется";
		Результат.Детали = Новый Структура("ИдентификаторЗадания, АдресХранилища", 
		ФоновоеЗадание.УникальныйИдентификатор, АдресХранилища);
			
	КонецЕсли;
	  
    Возврат Результат;
        
КонецФункции

&НаСервере
Процедура ЗаполнитьРезультатСравненияНаСервере(РезультатСравнения)
    
    Перем АдресХранилища;
    
    Если ТипЗнч(РезультатСравнения) = Тип("Структура") 
        И РезультатСравнения.Свойство("АдресХранилища", АдресХранилища) 
        И ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
        
        РезультатСравенения = ПолучитьИзВременногоХранилища(АдресХранилища);
        
        Если РезультатСравенения.Свойство("ДеревоОбъектов") Тогда
            
             ЗначениеВРеквизитФормы(РезультатСравенения.ДеревоОбъектов, "ДеревоВерсий");
            
        КонецЕсли; 
               
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДанныеСравненияВерсийНаКлиенте()
        
    Состояние(НСтр("ru='Формирование дерева сравнения версий'"));
    Результат = ЗапуститьФормированиеДанныхСравненияВФоне();
	ПродолжитьФормированиеДанныхСравнения(Результат);
		              
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьФормированиеДанныхСравнения(Результат)
	
	Перем Статус;
	
	Результат.Свойство("Статус", Статус);
	
	Если Статус = "ВыполненоУспешно" Тогда
		
		ЗаполнитьРезультатСравненияНаСервере(Результат.Детали);
		
	ИначеЕсли Статус = "Исключение" Тогда
		
		ВызватьИсключение "Произошла ошибка";
		
	Иначе
		
		ОтследитьФормированиеДанныхСравнения(Результат);
		
	КонецЕсли;
	          
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьПредставлениеОбъекта(Объект)

	ПредставлениеОбъекта = md_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Представление");
	
	Возврат ПредставлениеОбъекта;

КонецФункции

&НаКлиенте
Процедура ПоказатьФормуДлительнойОперации()

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекстЗаголовка", СформироватьПредставлениеОбъекта(Объект.СсылкаНаОбъект));
	
	ФормаДлительнойОперации = 
	ОткрытьФорму("Обработка.md_АдминистраторElasticSearch.Форма.ФормаВыполненияЗапроса",
	ПараметрыФормы,
	ЭтотОбъект,
	ЭтотОбъект.УникальныйИдентификатор,
	,
	,
	,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыФоновогоЗадания(Детали)

	ЭтотОбъект.ПараметрыФоновогоЗадания.Очистить();
    ЭтотОбъект.ПараметрыФоновогоЗадания.Добавить(Детали.ИдентификаторЗадания);
    ЭтотОбъект.ПараметрыФоновогоЗадания.Добавить(Детали.АдресХранилища);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтследитьФормированиеДанныхСравнения(Результат)
	
	ПоказатьФормуДлительнойОперации();
	ЗаполнитьПараметрыФоновогоЗадания(Результат.Детали);
   	
   	ИмяОбработчикаОжидания = "Подключаемый_ПроверитьВыполнениеФоновогоЗадания";
   	
	ЭтотОбъект.ПодключитьОбработчикОжидания(ИмяОбработчикаОжидания, 2, Истина);
    
Конецпроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеФоновогоЗадания()
    
    ИдентификаторЗадания	= ЭтотОбъект.ПараметрыФоновогоЗадания[0].Значение;
    АдресХранилища		    = ЭтотОбъект.ПараметрыФоновогоЗадания[1].Значение;
        
    Результат = РезультатВыполненияНаСервере(ИдентификаторЗадания, АдресХранилища);
    
    Если Результат.Статус = "ВыполненоУспешно" Тогда
		
		ФормаДлительнойОперации.Закрыть();
        
        ЭтотОбъект.ПараметрыФоновогоЗадания.Очистить();
        ЭтотОбъект.ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания");
        
        ЗаполнитьРезультатСравненияНаСервере(Результат.Детали);
        
        ЭтотОбъект.ТекущийЭлемент = Элементы.СтраницаДревоВерсий;
        
        ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Получение данных для сравнения версий завершено'"));
        
    ИначеЕсли Результат.Статус = "Исключение" Тогда
        
        ПоказатьПредупреждение(Неопределено,
        НСтр("ru = 'Операция не выполнена из-за ошибки, подробности см. в журнале регистрации.'"));
        
        ЭтотОбъект.ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания");
        
    ИначеЕсли Результат.Статус = "Выполняется" Тогда
        
        ЭтотОбъект.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", 
        2, Истина);
                
    КонецЕсли;
    
КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультатВыполненияНаСервере(ИдентификаторЗадания, АдресХранилища) Экспорт
    
	Результат = Новый Структура("Статус, Детали");
    
    Попытка
        
        Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
            
            Результат.Статус = "ВыполненоУспешно"; 
            Результат.Детали = Новый Структура("АдресХранилища", АдресХранилища);
                      
        Иначе
            
            Результат.Статус = "Выполняется";
            
        КонецЕсли;
        
    Исключение
        
        Результат.Статус = "Исключение"; 
        
    КонецПопытки;
    
	Возврат Результат;
    
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания) Экспорт
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Если Задание <> Неопределено
		И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОперацияНеВыполнена = Истина;
	
	Если Задание = Неопределено Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Длительные операции.Фоновое задание не найдено'; en = 'Long actions. Background job is not found'"),
		УровеньЖурналаРегистрации.Ошибка,,, Строка(ИдентификаторЗадания));
	Иначе	
		Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			ОшибкаЗадания = Задание.ИнформацияОбОшибке;
			Если ОшибкаЗадания <> Неопределено Тогда
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Длительные операции.Фоновое задание завершено аварийно'; en = 'Long actions. Background job failed'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке));
				
			Иначе
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Длительные операции.Фоновое задание завершено аварийно'; en = 'Long actions. Background job failed'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				НСтр("ru = 'Задание завершилось с неизвестной ошибкой.'; en = 'The job finished with an unknown error.'"));
			КонецЕсли;
		ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Длительные операции.Фоновое задание отменено администратором'; en = 'Long actions. Administrator canceled background job'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru = 'Задание завершилось с неизвестной ошибкой.'; en = 'The job finished with an unknown error.'"));
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОперацияНеВыполнена Тогда
		
		ВызватьИсключение(НСтр("ru = 'Не удалось выполнить данную операцию. 
		|Подробности см. в Журнале регистрации.'; en = 'This job cannot be executed. 
		|See details in the Event log.'"));
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#КонецОбласти






























